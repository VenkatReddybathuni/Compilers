fun isValid(grid: int[][], row: int, col: int, num: int): int {
   println("start");
    int i = 0;
    while (i < 9) {
        if (grid[row][i] == num) {
            return 0;
        }
        i = i + 1;
    }
    
    i = 0;
    while (i < 9) {
        if (grid[i][col] == num) {
            return 0;
        }
        i = i + 1;
    }
    
    int boxRow = row - (row % 3);
    int boxCol = col - (col % 3);
    
    i = boxRow;
    while (i < boxRow + 3) {
        int j = boxCol;
        while (j < boxCol + 3) {
            if (grid[i][j] == num) {
                return 0;
            }
            j = j + 1;
        }
        i = i + 1;
    }
    println("j");
    return 1;
    
}

fun findEmptyCell(grid: int[][], position: int[]): int {
    int row = 0;
    while (row < 9) {
        int col = 0;
        while (col < 9) {
            if (grid[row][col] == 0) {
                position[0] = row;
                position[1] = col;
                return 1;
            }
            col = col + 1;
        }
        row = row + 1;
    }
    return 0;
}

fun solveSudoku(grid: int[][]): int {
    
    int[] position = [0, 0];
    
    int isEmpty = 0;
    isEmpty = findEmptyCell(grid, position);
    if (isEmpty == 0) {
        return 1;
    }
    
    int row = position[0];
    int col = position[1];
    
    int num = 1;
    while (num <= 9) {
        
        int valid = 0;
        valid = isValid(grid, row, col, num);
        
        
        if (valid == 1) {
            grid[row][col] = num;
            
            int solved = 0;
            
            solved = solveSudoku(grid);
            if (solved == 1) {
                return 1;
            }
            
            grid[row][col] = 0;
        }
        num = num + 1;
    }
    
    return 0;
}

fun printGrid(grid: int[][]): int {
    int row = 0;
    while (row < 9) {
        if (row % 3 == 0 and row != 0) {
            println("------+-------+------");
        }
        
        int col = 0;
        string line = "";
        
        while (col < 9) {
            if (col % 3 == 0 and col != 0) {
                line = line ++ "| ";
            }
            
            line = line ++ str(grid[row][col]) ++ " ";
            col = col + 1;
        }
        
        println(line);
        row = row + 1;
    }
    return 0;
}

int[][] grid = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
];
println("Sudoku Puzzle:");
int result = 0;
result = printGrid(grid);

int solved = 0;
solved = solveSudoku(grid);
println("j");

if (solved == 1) {
    println("\nSudoku Solution:");
    result = printGrid(grid);
} else {
    println("\nNo solution exists for this Sudoku puzzle.");
}